//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------



using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IRequestMotorWCF")]
public interface IRequestMotorWCF
{
    string ListActiveRequest(List<int> Ids_Requests);
    void MarkAllAs_Async(long[] ids_RequestsGenerateds, int state, int? id_User, int? id_Device);
    string ListPendingRequestsWithState(int? id_User, int? id_Device, int numeroElementos);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IRuleMotorWCFChannel : IRequestMotorWCF, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class RequestMotorWCFClient : System.ServiceModel.ClientBase<IRequestMotorWCF>, IRequestMotorWCF
{
    
    public RequestMotorWCFClient()
    {
    }


    public RequestMotorWCFClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public RequestMotorWCFClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public RequestMotorWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public RequestMotorWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }

    public void MarkAllAs_Async(long[] ids_RequestsGenerateds, int state, int? id_User, int? id_Device)
    {
        base.Channel.MarkAllAs_Async(ids_RequestsGenerateds, state, id_User, id_Device);
    }
    public string ListPendingRequestsWithState(System.Nullable<int> Id_User, System.Nullable<int> Id_Device, int numeroElementos)
    {
        return base.Channel.ListPendingRequestsWithState(Id_User, Id_Device, numeroElementos);
    }
    public string ListActiveRequest(List<int> Ids_Requests)
    {
        return base.Channel.ListActiveRequest(Ids_Requests);
    }
}
